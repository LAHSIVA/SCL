1) Dotproduct

#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

#define N 5

int main()
{
    int arr1[N],arr2[N];
    int dot_product=0;

    for(int i=0;i<N;i++)
    {
        arr1[i]=i+1;
    }

    for(int j=0;j<N;j++)
    {
        arr2[j]=j+1;
    }

    for(int i=0;i<N;i++)
    {
        printf("%d ",arr1[i]);

    }
    printf("\n");

    for(int i=0;i<N;i++)
    {
        printf("%d ",arr2[i]);

    }
    printf("\n");

    #pragma omp parallel for
    for(int i=0;i<N;i++)
    {
        dot_product+=arr1[i]*arr2[i];
        printf("Thread %d adding arr1[%d] * arr2[%d] = %d, partial dot_product=%d\n",omp_get_thread_num(),i,i,arr1[i]*arr2[i],dot_product);
    }
    printf("Final dot_product is: %d",dot_product);    
}



2)Matrix Multiplication

#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

# define N 3


void print_matrix(int matrix[N][N])
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    int A[N][N],B[N][N],C[N][N]={0};

    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            A[i][j]=i+1;
            B[i][j]=j+1;
        }
    }

    printf("Matrix A:\n");
    print_matrix(A);
    printf("Matrix B:\n");
    print_matrix(B);

    // parallel matric multiplication

    #pragma omp parallel for collapse(2)
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            for(int k=0;k<N;k++)
            {
                C[i][j]+=A[i][k]*B[k][j];
            }
            printf("Thread %d computed c [%d] [%d]= %d\n",omp_get_thread_num(),i,j,C[i][j]);
        }
    }

    printf("Resultant Matrix C:\n");
    print_matrix(C);
}



3) Parallel selection



#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

#define N 5

int main()
{
    int arr[N]={1,2,3,4,5};
    int sum,max=0;

    #pragma omp parallel sections
    {
        #pragma omp section // section1 calculate sum
        {
            sum=0;
            for(int i=0;i<N;i++)
            {
                sum+=arr[i];
            }
            printf("Thread %d: Sum of array =%d\n",omp_get_thread_num(),sum);
        }

        #pragma omp section // section2 calculate max
        {
                max=arr[0];
                for(int i=1;i<N;i++)
                {
                    if(arr[i]>max)
                    {
                        max=arr[i];
                    }
                }
                printf("Thread %d: Maximum of array =%d\n",omp_get_thread_num(),max);
        }

        #pragma omp section
        {
            printf("Thread %d: This is a separate independent task.\n", omp_get_thread_num());
        }
    }
}

4) Sum of n numbers

#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

int main()
{
    int sum=0,n=100;

    #pragma omp parallel
    {
        #pragma omp single
        {
            printf("Starting computation with %d thread\n",omp_get_thread_num());
        }

        #pragma omp for reduction(+:sum)
            for(int i=1;i<=n;i++)
            {   
                sum+=i;
                printf("Number %d is processed by thread %d\n",i,omp_get_thread_num());
            }
    }

    printf("Sum is: %d\n",sum);
}   



5)Mergesort

#include<stdio.h>
#include<omp.h>
#include<stdlib.h>

#define n 10

int merge(int arr[],int l,int m,int r)
{
    int n1 = m-l+1;
    int n2 = r-m;
    int L[n1],R[n2];
    for (int i=0; i<n1; i++)
    {
        L[i] = arr[l+i];
    }
    for (int j=0; j<n2; j++)
    {
        R[j] = arr[m+1+j];
    }
    int i = 0,j = 0,k = l;
    while(i<n1 && j<n2)
    {
        if(L[i]<R[j]){
            arr[k] = L[i];
            i++;
        }
        else{
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while(i<n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while(j<n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
int mergesort(int arr[],int l,int r)
{
    if(l<r)
    {
        int m = l + (r-l)/2;
        #pragma omp parallel
        {
            #pragma omp single
            {
                mergesort(arr,l,m);

                #pragma omp task
                mergesort(arr,l,m);

                #pragma omp task
                mergesort(arr,m+1,r);

                #pragma omp taskwait
                merge(arr,l,m,r); 
            }

        }  
    }
}
int main()
{
    int arr[n];
    for(int i=0;i<n;i++)
    {
        arr[i] = rand()%50;
    }
    double start = omp_get_wtime();

   
    mergesort(arr,0,n-1);
   
    
    double end = omp_get_wtime();
    printf("time ::%f",end-start);
    for(int i=0;i<n;i++)
    {
        printf("%d ,",arr[i]);
    }
}

6) Quicksort

#include<stdio.h>
#include<omp.h>
#include<stdlib.h>
#define n 10
void swap(int *a,int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[],int low,int high)
{
    int pivot = arr[high];
    int i= low-1;
    for(int j=low;j<high;j++){
        if (arr[j]<pivot){
            i++;
            swap(&arr[i],&arr[j]);
        }
    }

    swap(&arr[i+1],&arr[high]);
    return i+1;
}
int quicksort(int arr[],int low,int high)
{
    if(low<high)
    {
        int pi = partition(arr,low,high);
        #pragma omp parallel sections
        {
            #pragma omp section
            quicksort(arr,low,pi-1);
            #pragma omp section
            quicksort(arr,pi+1,high);
        }

    }
}
int main()
{
    int arr[n];
    for(int i=0;i<n;i++)
    {
        arr[i] = rand()%50;
    }
    double start = omp_get_wtime();
    quicksort(arr,0,n-1);
    double end = omp_get_wtime();
    printf("time ::%f",end-start);
    for(int i=0;i<n;i++)
    {
        printf("%d ,",arr[i]);
    }
}

7) Bubblesort

#include <stdio.h>
#include <omp.h>

#define N 10

void bubble_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        #pragma omp parallel for
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[N] = {64, 34, 25, 12, 22, 11, 90, 88, 76, 45};

    bubble_sort(arr, N);

    printf("Sorted Array: ");
    for (int i = 0; i < N; i++)
        printf("%d ", arr[i]);

    printf("\n");
    return 0;
}

8) parallelsum

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 1000000  // Large array size

int main() {
    int *arr = (int *)malloc(N * sizeof(int));
    int max_value = 0, global_sum = 0;

    // Initialize the array with random values
    for (int i = 0; i < N; i++) {
        arr[i] = rand() % 1000;  // Random numbers between 0 and 999
    }

    // Find max value in parallel
    #pragma omp parallel for reduction(max:max_value)
    for (int i = 0; i < N; i++) {
        if (arr[i] > max_value)
            max_value = arr[i];
    }

    // Sum the max_value N times (to simulate workload)
    #pragma omp parallel for reduction(+:global_sum)
    for (int i = 0; i < N; i++) {
        global_sum += max_value;
    }

    printf("Largest Number: %d\n", max_value);
    printf("Summation of Largest Number: %d\n", global_sum);

    free(arr);
    return 0;
}


9) pi calc

#include <stdio.h>
#include <omp.h>

#define NUM_STEPS 100000000  // Large number of steps

int main() {
    double step, x, pi = 0.0;
    step = 1.0 / (double)NUM_STEPS;

    #pragma omp parallel
    {
        double local_sum = 0.0;
        #pragma omp for
        for (int i = 0; i < NUM_STEPS; i++) {
            x = (i + 0.5) * step;
            local_sum += 4.0 / (1.0 + x * x);
        }

        #pragma omp atomic
        pi += local_sum;
    }

    pi *= step;
    printf("Approximated value of PI: %.15f\n", pi);
    return 0;
}


10)  Matrix multiplication and transpose

#include <stdio.h>
#include <omp.h>

#define N 5  // Reduced matrix size for better visualization

int A[N][N], B[N][N], C[N][N], T[N][N];

void print_matrix(const char *name, int matrix[N][N]) {
    printf("\nMatrix %s:\n", name);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%5d ", matrix[i][j]);
        }
        printf("\n");
    }
}

void matrix_multiply() {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void matrix_transpose() {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            T[j][i] = A[i][j];  // Transpose operation
        }
    }
}

int main() {
    // Initialize matrices
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            A[i][j] = B[i][j] = i + j;

    // Print initial matrices
    print_matrix("A", A);
    print_matrix("B", B);

    // Perform parallel matrix multiplication
    matrix_multiply();
    print_matrix("C (Multiplication Result)", C);

    // Perform parallel matrix transposition
    matrix_transpose();
    print_matrix("T (Transpose of A)", T);

    printf("\nMatrix Multiplication and Transposition Completed.\n");
    return 0;
}


11)  divide and conquer

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#define SIZE 512 // Define matrix size

// Function to allocate memory for matrix
double** allocate_matrix(int size) {
    double** matrix = (double**)malloc(size * sizeof(double*));
    for (int i = 0; i < size; i++) {
        matrix[i] = (double*)malloc(size * sizeof(double));
    }
    return matrix;
}

// Function to free matrix memory
void free_matrix(double** matrix, int size) {
    for (int i = 0; i < size; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

// Function to initialize matrices with random values
void initialize_matrix(double** matrix, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            matrix[i][j] = rand() % 10;
        }
    }
}

// Standard matrix multiplication for base case
void multiply_matrices(double** A, double** B, double** C, int size) {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = 0;
            for (int k = 0; k < size; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Function to implement parallel Strassen’s Algorithm
void strassen_parallel(double** A, double** B, double** C, int size) {
    if (size <= 128) {  // Base case threshold
        multiply_matrices(A, B, C, size);
        return;
    }
    
    int newSize = size / 2;
    double** M1 = allocate_matrix(newSize);
    double** M2 = allocate_matrix(newSize);
    double** M3 = allocate_matrix(newSize);
    double** M4 = allocate_matrix(newSize);
    double** M5 = allocate_matrix(newSize);
    double** M6 = allocate_matrix(newSize);
    double** M7 = allocate_matrix(newSize);

    #pragma omp parallel sections
    {
        #pragma omp section
        strassen_parallel(A, B, M1, newSize);
        
        #pragma omp section
        strassen_parallel(A, B, M2, newSize);
        
        #pragma omp section
        strassen_parallel(A, B, M3, newSize);
        
        #pragma omp section
        strassen_parallel(A, B, M4, newSize);
    }
    
    // Combine results
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = M1[i][j] + M4[i][j] - M5[i][j] + M7[i][j];
            C[i][j + newSize] = M3[i][j] + M5[i][j];
            C[i + newSize][j] = M2[i][j] + M4[i][j];
            C[i + newSize][j + newSize] = M1[i][j] - M2[i][j] + M3[i][j] + M6[i][j];
        }
    }
    
    // Free allocated memory
    free_matrix(M1, newSize);
    free_matrix(M2, newSize);
    free_matrix(M3, newSize);
    free_matrix(M4, newSize);
    free_matrix(M5, newSize);
    free_matrix(M6, newSize);
    free_matrix(M7, newSize);
}

int main() {
    double** A = allocate_matrix(SIZE);
    double** B = allocate_matrix(SIZE);
    double** C = allocate_matrix(SIZE);
    
    initialize_matrix(A, SIZE);
    initialize_matrix(B, SIZE);
    
    int num_threads[] = {2, 4, 6, 8};
    double start, end;
    
    for (int i = 0; i < 4; i++) {
        omp_set_num_threads(num_threads[i]);
        start = omp_get_wtime();
        strassen_parallel(A, B, C, SIZE);
        end = omp_get_wtime();
        printf("Threads: %d, Time: %f seconds\n", num_threads[i], end - start);
    }
    
    // Print result matrix (for debugging, optional)
    printf("Result matrix C (partial view):\n");
    for (int i = 0; i < 5; i++) { // Print only first 5 rows for brevity
        for (int j = 0; j < 5; j++) {
            printf("%f ", C[i][j]);
        }
        printf("\n");
    }
    
    free_matrix(A, SIZE);
    free_matrix(B, SIZE);
    free_matrix(C, SIZE);
    return 0;
}
