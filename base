1) Dotproduct

#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

#define N 5

int main()
{
    int arr1[N],arr2[N];
    int dot_product=0;

    for(int i=0;i<N;i++)
    {
        arr1[i]=i+1;
    }

    for(int j=0;j<N;j++)
    {
        arr2[j]=j+1;
    }

    for(int i=0;i<N;i++)
    {
        printf("%d ",arr1[i]);

    }
    printf("\n");

    for(int i=0;i<N;i++)
    {
        printf("%d ",arr2[i]);

    }
    printf("\n");

    #pragma omp parallel for
    for(int i=0;i<N;i++)
    {
        dot_product+=arr1[i]*arr2[i];
        printf("Thread %d adding arr1[%d] * arr2[%d] = %d, partial dot_product=%d\n",omp_get_thread_num(),i,i,arr1[i]*arr2[i],dot_product);
    }
    printf("Final dot_product is: %d",dot_product);    
}



2)Matrix Multiplication

#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

# define N 3


void print_matrix(int matrix[N][N])
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    int A[N][N],B[N][N],C[N][N]={0};

    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            A[i][j]=i+1;
            B[i][j]=j+1;
        }
    }

    printf("Matrix A:\n");
    print_matrix(A);
    printf("Matrix B:\n");
    print_matrix(B);

    // parallel matric multiplication

    #pragma omp parallel for collapse(2)
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            for(int k=0;k<N;k++)
            {
                C[i][j]+=A[i][k]*B[k][j];
            }
            printf("Thread %d computed c [%d] [%d]= %d\n",omp_get_thread_num(),i,j,C[i][j]);
        }
    }

    printf("Resultant Matrix C:\n");
    print_matrix(C);
}



3) Parallel selection



#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

#define N 5

int main()
{
    int arr[N]={1,2,3,4,5};
    int sum,max=0;

    #pragma omp parallel sections
    {
        #pragma omp section // section1 calculate sum
        {
            sum=0;
            for(int i=0;i<N;i++)
            {
                sum+=arr[i];
            }
            printf("Thread %d: Sum of array =%d\n",omp_get_thread_num(),sum);
        }

        #pragma omp section // section2 calculate max
        {
                max=arr[0];
                for(int i=1;i<N;i++)
                {
                    if(arr[i]>max)
                    {
                        max=arr[i];
                    }
                }
                printf("Thread %d: Maximum of array =%d\n",omp_get_thread_num(),max);
        }

        #pragma omp section
        {
            printf("Thread %d: This is a separate independent task.\n", omp_get_thread_num());
        }
    }
}

4) Sum of n numbers

#include<stdio.h>
#include<stdlib.h>
#include<omp.h>

int main()
{
    int sum=0,n=100;

    #pragma omp parallel
    {
        #pragma omp single
        {
            printf("Starting computation with %d thread\n",omp_get_thread_num());
        }

        #pragma omp for reduction(+:sum)
            for(int i=1;i<=n;i++)
            {   
                sum+=i;
                printf("Number %d is processed by thread %d\n",i,omp_get_thread_num());
            }
    }

    printf("Sum is: %d\n",sum);
}   
